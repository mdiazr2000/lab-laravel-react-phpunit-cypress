<?php


namespace Tests\Feature;

use App\Jobs\ProcessFile;
use App\Models\FilesUser;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Tests\Traits\FixturesForRegisterUser;
use Tests\Utils\DataProviders\Provider;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

class FileUserTest extends TestCase
{

    use FixturesForRegisterUser;


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic test for prepare user and get token.
     *
     * @return void
     */
    public function test_prepare() {

        $request = $this->prepareDataForRequest();

        $response = $this->post(Provider::$APP_URL_PREFIX . "/register", $request, Provider::getHeaders());

        $objResponse = json_decode((string) $response->getContent(), true);

        $request = [
            'email' => $objResponse['user']['email'],
            'password' => '123'
        ];
        $responseAccessToken = $this->post(Provider::$APP_URL_PREFIX . "/login", $request, Provider::getHeaders());

        $objResponseAccessToken = json_decode((string) $responseAccessToken->getContent(), true);

        $responseAccessToken->assertJsonStructure([
            'access_token','token_type', 'expires_in'
        ]);

        return[
            'accessToken' => $objResponseAccessToken['access_token']
        ];
    }

    /**
     * A basic test for test upload file.
     * @depends test_prepare
     * @return void
     */
    public function test_file_upload($token) {

        Storage::disk('public_uploads');

        $nameFile = $this->faker->text(5).'.jpg';
        $file = UploadedFile::fake()->image($nameFile);

        $response = $this->post(Provider::$APP_URL_PREFIX . '/upload', [
            'file' => $file,
        ], Provider::getHeadersWithToken($token['accessToken']));

      // check entry in database
        $this->assertDatabaseHas('files_users', [
            'name' => $nameFile
        ]);

        // check file in storage
        $fileUser = FilesUser::where('name', $nameFile)->first();

        Storage::disk('public_uploads')->assertExists($fileUser->path);

        return [
            'fileUser' => $fileUser,
            'token' => $token
        ];

    }


    /**
     * A basic test for test zip file.
     *
     * @depends test_file_upload
     * @param $token
     */
    public function test_file_zip($fileUser) {

        $processFileZipJob = new ProcessFile($fileUser['fileUser']);
        $processFileZipJob->handle();

        // check file in storage
        $fileUserZip = FilesUser::where('name', $fileUser['fileUser']->name)->first();

        // check entry in database
        $this->assertDatabaseHas('files_users', [
            'zip_name' => $fileUserZip->saved_name.'.zip'
        ]);

        Storage::disk('public_uploads')->assertExists($fileUserZip->path_zip);

        return [
            'fileUserZip' => $fileUserZip,
            'token' => $fileUser['token']
        ];
    }

    /**
     * @depends test_file_zip
     * @param $token
     */
    public function test_file_download($fileUserZip) {

       $response = $this->get(Provider::$APP_URL_PREFIX . "/downloadfile/{$fileUserZip['fileUserZip']->id}");
       $response->assertDownload();
    }
}
